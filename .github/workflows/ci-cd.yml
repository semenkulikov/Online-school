name: CI/CD Pipeline

on:
  push:
    branches:
      - main

# ‚Üê –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤–æ –≤—Å–µ—Ö jobs
env:
  IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/online-school:latest

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:17
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DEBUG_MODE: ${{ secrets.DEBUG_MODE }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      LANGUAGE_CODE: ${{ secrets.LANGUAGE_CODE }}
      IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/online-school:latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          cat <<EOF > .env
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          DEBUG_MODE=${{ secrets.DEBUG_MODE }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
          LANGUAGE_CODE=${{ secrets.LANGUAGE_CODE }}
          EOF

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for Postgres..."
            sleep 1
          done

      - name: Run migrations
        run: python manage.py migrate

      - name: Run tests
        run: python manage.py test

  build-and-push:
    needs: build-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          cat <<EOF > .env
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          DEBUG_MODE=${{ secrets.DEBUG_MODE }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
          LANGUAGE_CODE=${{ secrets.LANGUAGE_CODE }}
          EOF

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /home/${{ secrets.SERVER_USER }}/online-school
            git pull origin main
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º .env —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
            cat <<EOF > .env
            DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            DEBUG_MODE=${{ secrets.DEBUG_MODE }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
            LANGUAGE_CODE=${{ secrets.LANGUAGE_CODE }}
            IMAGE=${{ env.IMAGE }}
            EOF
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if [ ! -f ssl/certs/server.crt ] || [ ! -f ssl/private/server.key ]; then
              echo "üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
              chmod +x generate_ssl.sh
              ./generate_ssl.sh
            fi
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (volume –ù–ï —Ç—Ä–æ–≥–∞–µ–º)
            docker compose -f docker-compose.yml -f docker-compose.prod.yml down || true
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞
            docker image prune -f
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑
            docker pull ${{ env.IMAGE }}
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build
            
            # –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
            sleep 20
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
            docker compose -f docker-compose.yml -f docker-compose.prod.yml ps
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã Django –≤ –≤–µ–± –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django..."
            docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T web python manage.py collectstatic --noinput || true
            docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T web python manage.py migrate || true
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T web python manage.py check_env || true
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T web python manage.py init_production || true
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
            echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤..."
            timeout 10 docker compose -f docker-compose.yml -f docker-compose.prod.yml logs --tail=50 web || true
            timeout 10 docker compose -f docker-compose.yml -f docker-compose.prod.yml logs --tail=20 nginx || true
            
            echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω! –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://${{ secrets.SERVER_HOST }}"
