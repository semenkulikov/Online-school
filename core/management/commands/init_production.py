from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.core.cache import cache
from django.db import connection
from django.conf import settings
import time

class Command(BaseCommand):
    help = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞: –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ë–î, –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"

    def add_arguments(self, parser):
        parser.add_argument(
            '--skip-optimization',
            action='store_true',
            help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ë–î',
        )
        parser.add_argument(
            '--skip-cache-warmup',
            action='store_true', 
            help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞',
        )

    def handle(self, *args, **options):
        """–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        
        self.stdout.write(self.style.SUCCESS('üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–∏—Å—Ç–µ–º—ã...'))
        
        start_time = time.time()
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
        self.stdout.write('\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...')
        try:
            call_command('makemigrations', verbosity=0)
            self.stdout.write(self.style.SUCCESS('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã'))
        except Exception as e:
            self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π: {e}'))
        
        # 2. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
        self.stdout.write('\nüì¶ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...')
        try:
            call_command('migrate', verbosity=0)
            self.stdout.write(self.style.SUCCESS('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: {e}'))
            return
        
        # 3. –°–±–æ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        
        self.stdout.write('\nüìÅ –°–±–æ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...')
        try:
            call_command('collectstatic', '--noinput', verbosity=0)
            self.stdout.write(self.style.SUCCESS('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å–æ–±—Ä–∞–Ω—ã'))
        except Exception as e:
            self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤: {e}'))
        
        # 4. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ë–î
        if not options['skip_optimization']:
            self.stdout.write('\nüóÉÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
            try:
                call_command('optimize_db', verbosity=0)
                self.stdout.write(self.style.SUCCESS('‚úÖ –ë–î –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'))
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î: {e}'))
        
        # 5. –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        self.stdout.write('\nüóÑÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...')
        try:
            cache.clear()
            self.stdout.write(self.style.SUCCESS('‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω'))
        except Exception as e:
            self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}'))
        
        # 6. –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
        if not options['skip_cache_warmup']:
            self.stdout.write('\nüî• –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞...')
            try:
                self._warmup_cache()
                self.stdout.write(self.style.SUCCESS('‚úÖ –ö—ç—à –ø—Ä–æ–≥—Ä–µ—Ç'))
            except Exception as e:
                self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞: {e}'))
        
        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.stdout.write('\nüìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...')
        try:
            call_command('monitor_performance')
            self.stdout.write(self.style.SUCCESS('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'))
        except Exception as e:
            self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}'))
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        total_time = time.time() - start_time
        self.stdout.write(
            self.style.SUCCESS(
                f'\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥!'
            )
        )
        self.stdout.write('–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ')
    
    def _warmup_cache(self):
        """–ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –Ω–∞–∏–±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        from core.models import Student, Course, Assessment
        
        # –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –∫—ç—à –¥–ª—è –ø–µ—Ä–≤—ã—Ö 20 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        students = Student.objects.select_related('statistic')[:20]
        for student in students:
            try:
                # –ö—ç—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞
                cache_key = f"student_quick_stats_{student.id}"
                if not cache.get(cache_key):
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—Å—Ç –∫—ç—à
                    if hasattr(student, 'statistic'):
                        pass  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
                
                # –ö—ç—à–∏—Ä—É–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
                cache_key = f"student_avg_score_{student.id}"
                if not cache.get(cache_key):
                    scores = Assessment.objects.filter(
                        enrollment__student=student, 
                        is_final_grade=True
                    ).values_list('score', flat=True)
                    
                    if scores:
                        avg_score = sum(float(score) for score in scores) / len(scores)
                        cache.set(cache_key, avg_score, 600)
                        
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞
        
        # –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –∫—ç—à –¥–ª—è –∫—É—Ä—Å–æ–≤
        courses = Course.objects.all()[:20]
        for course in courses:
            try:
                cache_key = f"course_students_{course.id}"
                if not cache.get(cache_key):
                    count = course.assessments.values('enrollment__student').distinct().count()
                    cache.set(cache_key, count, 300)
                    
                cache_key = f"course_avg_{course.id}"
                if not cache.get(cache_key):
                    final_assessments = course.assessments.filter(is_final_grade=True)
                    if final_assessments.exists():
                        avg = sum(float(a.score) for a in final_assessments) / final_assessments.count()
                        cache.set(cache_key, avg, 300)
            except Exception:
                pass