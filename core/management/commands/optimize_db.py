from django.core.management.base import BaseCommand
from django.db import connection
from django.core.cache import cache
import logging

logger = logging.getLogger('core')


class Command(BaseCommand):
    help = "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear-cache',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à',
        )

    def handle(self, *args, **options):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        
        if options['clear_cache']:
            self.clear_cache()
        
        self.create_indexes()
        self.analyze_database()
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        )

    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à"""
        try:
            cache.clear()
            self.stdout.write('üóëÔ∏è  –ö—ç—à –æ—á–∏—â–µ–Ω')
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}')
            )

    def create_indexes(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        indexes = [
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            "CREATE INDEX IF NOT EXISTS idx_student_status ON core_student(status);",
            "CREATE INDEX IF NOT EXISTS idx_student_email ON core_student(email);",
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏–π
            "CREATE INDEX IF NOT EXISTS idx_enrollment_student_session ON core_enrollment(student_id, session_id);",
            "CREATE INDEX IF NOT EXISTS idx_enrollment_status ON core_enrollment(status);",
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ—Ü–µ–Ω–æ–∫
            "CREATE INDEX IF NOT EXISTS idx_assessment_enrollment ON core_assessment(enrollment_id);",
            "CREATE INDEX IF NOT EXISTS idx_assessment_course ON core_assessment(course_id);",
            "CREATE INDEX IF NOT EXISTS idx_assessment_final_grade ON core_assessment(is_final_grade);",
            "CREATE INDEX IF NOT EXISTS idx_assessment_date ON core_assessment(date);",
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            "CREATE INDEX IF NOT EXISTS idx_certificate_student ON core_certificate(student_id);",
            "CREATE INDEX IF NOT EXISTS idx_certificate_course ON core_certificate(course_id);",
            "CREATE INDEX IF NOT EXISTS idx_certificate_type ON core_certificate(type);",
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
            "CREATE INDEX IF NOT EXISTS idx_attendance_enrollment ON core_attendance(enrollment_id);",
            "CREATE INDEX IF NOT EXISTS idx_attendance_session ON core_attendance(session_id);",
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫—É—Ä—Å–æ–≤
            "CREATE INDEX IF NOT EXISTS idx_course_session ON core_course(session_id);",
            
            # –°–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            "CREATE INDEX IF NOT EXISTS idx_assessment_enrollment_final ON core_assessment(enrollment_id, is_final_grade);",
            "CREATE INDEX IF NOT EXISTS idx_certificate_student_course ON core_certificate(student_id, course_id);",
        ]
        
        with connection.cursor() as cursor:
            for index_sql in indexes:
                try:
                    cursor.execute(index_sql)
                    index_name = index_sql.split()[5]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–Ω–¥–µ–∫—Å–∞
                    self.stdout.write(f'üìà –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: {index_name}')
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")

    def analyze_database(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with connection.cursor() as cursor:
            try:
                # PostgreSQL ANALYZE –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                cursor.execute("ANALYZE;")
                self.stdout.write('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü
                cursor.execute("""
                    SELECT 
                        schemaname,
                        tablename,
                        pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size
                    FROM pg_tables 
                    WHERE schemaname = 'public' 
                    ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC
                    LIMIT 10;
                """)
                
                results = cursor.fetchall()
                self.stdout.write('\nüìè –†–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü:')
                for schema, table, size in results:
                    self.stdout.write(f'  {table}: {size}')
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
                self.stdout.write(
                    self.style.WARNING('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
                ) 