from django.core.management.base import BaseCommand
from django.db import connection
from django.core.cache import cache
from django.test import Client
import time
import json

class Command(BaseCommand):
    help = "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"

    def handle(self, *args, **options):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
        
        self.stdout.write('üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...\n')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ URL
        urls = [
            '/admin/',
            '/admin/core/student/',
            '/admin/core/course/',
            '/admin/core/assessment/',
            '/admin/core/certificate/',
        ]
        
        client = Client()
        results = {}
        
        for url in urls:
            self.stdout.write(f'–¢–µ—Å—Ç–∏—Ä—É—é {url}...')
            
            # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è
            start_time = time.time()
            
            # –ü–æ–¥—Å—á–µ—Ç SQL –∑–∞–ø—Ä–æ—Å–æ–≤
            queries_before = len(connection.queries)
            
            try:
                response = client.get(url)
                end_time = time.time()
                
                queries_after = len(connection.queries)
                query_count = queries_after - queries_before
                response_time = end_time - start_time
                
                results[url] = {
                    'status': response.status_code,
                    'time': response_time,
                    'queries': query_count,
                    'size': len(response.content) if hasattr(response, 'content') else 0
                }
                
                # –¶–≤–µ—Ç–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è
                if response_time < 0.1:
                    time_color = self.style.SUCCESS
                elif response_time < 0.5:
                    time_color = self.style.WARNING
                else:
                    time_color = self.style.ERROR
                
                self.stdout.write(
                    f'  ‚úÖ {response.status_code} | '
                    f'{time_color(f"{response_time:.3f}s")} | '
                    f'SQL: {query_count} | '
                    f'–†–∞–∑–º–µ—Ä: {len(response.content) if hasattr(response, "content") else 0} bytes'
                )
                
            except Exception as e:
                results[url] = {
                    'error': str(e),
                    'time': 0,
                    'queries': 0
                }
                self.stdout.write(
                    self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞: {e}')
                )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        self.stdout.write('\nüóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞...')
        cache_test_key = 'performance_test'
        cache.set(cache_test_key, 'test_value', 10)
        cache_value = cache.get(cache_test_key)
        
        if cache_value == 'test_value':
            self.stdout.write(self.style.SUCCESS('  ‚úÖ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç'))
        else:
            self.stdout.write(self.style.ERROR('  ‚ùå –ö—ç—à –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.stdout.write('\nüóÉÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
        try:
            with connection.cursor() as cursor:
                cursor.execute("SELECT COUNT(*) FROM core_student;")
                student_count = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(*) FROM core_assessment;")
                assessment_count = cursor.fetchone()[0]
                
                self.stdout.write(
                    f'  üìä –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {student_count} | –û—Ü–µ–Ω–æ–∫: {assessment_count}'
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}')
            )
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.stdout.write('\nüìà –°–≤–æ–¥–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:')
        total_time = sum(r.get('time', 0) for r in results.values() if 'error' not in r)
        total_queries = sum(r.get('queries', 0) for r in results.values() if 'error' not in r)
        
        self.stdout.write(f'  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.3f}s')
        self.stdout.write(f'  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SQL –∑–∞–ø—Ä–æ—Å–æ–≤: {total_queries}')
        self.stdout.write(f'  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {total_time/len(urls):.3f}s')
        
        if total_time < 1.0:
            self.stdout.write(self.style.SUCCESS('üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è!'))
        elif total_time < 3.0:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–∞—è'))
        else:
            self.stdout.write(self.style.ERROR('üêå –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è!')) 